'use strict'

const config = require('./v1/config')
const mongoose = require('mongoose')

const Schema = mongoose.Schema
const helloSchema = new Schema({
  text: {
    match: [/^[A-Za-z]{3,10}$/, 'Invalid pattern: Hello text'],
    required: true,
    trim: true,
    type: String
  }
})
const HelloModel = mongoose.model('Hello', helloSchema)
mongoose.Promise = global.Promise
mongoose.set('debug', 'yes')
mongoose.connect('mongodb://' + config.mongodb.host + ':' + config.mongodb.port + '/' + config.mongodb.db)

const db = mongoose.connection.useDb(config.mongodb.db)
db.on('connected', function () {
  const bodyParser = require('body-parser')
  const express = require('express')
  const app = express()

  app.use(function (req, res, next) {
    res.header('Access-Control-Allow-Origin', '*')
    res.header('Access-Control-Allow-Methods', 'OPTIONS, DELETE, GET, POST')
    res.header('Access-Control-Allow-Headers', 'Accept, Content-Type')
    next()
  })

  app.use(bodyParser.json())
  app.use(bodyParser.urlencoded({extended: true}))

  app.post('/', function (req, res) {
    // Check if hello is present
    if (!req.body.hello) {
      return res.status(422).end() // Un-processable Entity
    }

    HelloModel.create({
      text: req.body.hello
    }, function (err, doc) {
      if (err) {
        if (err.name === 'CastError' || err.name === 'ValidationError') {
          return res.status(400).end()
        }
        return res.status(500).end()
      }

      res.status(201).json({
        hello: doc
      })
    })
  })
  app.get('/', function (req, res) {
    const where = {}
    const what = 'text'
    const options = {}

    HelloModel.find(where, what, options, function (err, docs) {
      if (err) {
        return res.status(500).end()
      }

      if (docs.length < 1) {
        return res.status(204).end()
      }

      res.status(200).json({
        hellos: docs
      })
    })
  })
  app.delete('/:id', function (req, res) {
    // Check if block id is present
    if (!req.params.id) {
      return res.status(422).end()
    }

    let where = {_id: req.params.id}

    HelloModel.findOneAndRemove(where, function (err) {
      if (err) {
        return res.status(500).end()
      }

      res.status(200).end()
    })
  })

  const PORT = process.env.PORT || config.server.port
  const server = app.listen(PORT, () => console.log(`Listening on ${PORT}`))

  const socketIO = require('socket.io')
  const io = socketIO(server)
  require('./v1/lib/sockets').socket(io)
})
