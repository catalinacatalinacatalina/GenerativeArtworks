'use strict'

let app = {
  config: {
    serverUrl: 'http://' + window.location.hostname + ':8080'
  },
  service: {
    post: function (form) {
      return new Promise(resolve => {
        const xhr = new window.XMLHttpRequest()
        xhr.open('POST', app.config.serverUrl)
        xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded')
        xhr.onload = function () {
          if (xhr.readyState === 4) {
            resolve({
              status: xhr.status,
              hello: xhr.status === 201 ? JSON.parse(xhr.responseText).hello : null
            })
          }
        }
        xhr.send('hello=' + form.hello.value)
      })
    },
    get: function () {
      return new Promise(resolve => {
        const xhr = new window.XMLHttpRequest()
        xhr.open('GET', app.config.serverUrl, true)
        xhr.onload = function () {
          if (xhr.readyState === 4) {
            resolve({
              status: xhr.status,
              hellos: xhr.status === 200 ? JSON.parse(xhr.responseText).hellos : null
            })
          }
        }
        xhr.send(null)
      })
    },
    delete: function (id) {
      return new Promise(resolve => {
        const xhr = new window.XMLHttpRequest()
        xhr.open('DELETE', app.config.serverUrl + '/' + id, true)
        xhr.onload = function () {
          if (xhr.readyState === 4) {
            resolve({status: xhr.status})
          }
        }
        xhr.send(null)
      })
    }
  },
  bindEvents: function () {
    // DOM ready
    document.addEventListener('DOMContentLoaded', () => {
      // Load Hellos
      this.service.get().then(response => {
        if (response.status === 200) {
          for (let key in response.hellos) {
            if (response.hellos.hasOwnProperty(key)) {
              this.prependHello(response.hellos[key])
            }
          }
        } else if (response.status === 204) {
          document.querySelector('h3').style.display = 'none'
          document.querySelector('p').style.display = 'block'
        } else {
          this.appendError(response.status)
        }
      })
    }, false)

    // Form submit
    let form = document.forms.namedItem('hello-form')
    form.addEventListener('submit', event => {
      event.preventDefault()

      this.service.post(form).then(response => {
        if (response.status === 201) {
          this.prependHello(response.hello)
          form.hello.value = null
          form.hello.focus()
        } else {
          this.appendError(response.status)
        }
      })
    }, false)
  },
  prependHello: function (hello) {
    let list = document.querySelector('ul')

    let listItem = document.createElement('li')
    listItem.innerHTML = 'Hello <strong>' + hello.text + '</strong>'

    let buttonItem = document.createElement('button')
    buttonItem.setAttribute('value', hello._id)
    buttonItem.innerHTML = 'Delete'
    buttonItem.addEventListener('click', event => {
      this.service.delete(event.target.value).then(response => {
        if (response.status === 200) {
          let parent = event.target.parentElement
          parent.parentElement.removeChild(event.target.parentElement)

          // Update list title
          if (list.childElementCount < 1) {
            document.querySelector('h3').style.display = 'none'
            document.querySelector('p').style.display = 'block'
          }
        } else {
          this.appendError(response.status)
        }
      })
    }, false)

    // Update list title
    if (list.childElementCount < 1) {
      document.querySelector('h3').style.display = 'block'
      document.querySelector('p').style.display = 'none'
    }

    listItem.appendChild(buttonItem)
    list.insertBefore(listItem, list.firstChild)
  },
  appendError: function (code) {
    let text
    switch (code) {
      case 422:
        text = '422: Unprocessable Entity'
        break
      case 400:
        text = '400: Bad Request'
        break
      case 500:
        text = '500: Internal Server Error'
        break
      default:
        text = 'An error has occurred'
    }

    let body = document.querySelector('body')
    let span = document.createElement('span')
    span.innerHTML = text
    body.appendChild(span)

    setTimeout(function () {
      body.removeChild(span)
    }, 5000)
  }
}

app.bindEvents()
